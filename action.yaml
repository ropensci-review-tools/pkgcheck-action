name: "pkgcheck"
description: "Test your package with {pkgcheck}."
inputs:
  ref:
    description: "The ref to checkout and check. Set to empty string to skip checkout."
    default: "${{ github.ref }}"
    required: true
  post-to-issue:
    description: "Should the pkgcheck results be posted as an issue?"
    default: true
    required: true
  issue-title:
    description: "Name for the issue containing the pkgcheck results. Will be created or updated."
    default: "pkgcheck results - ${{ github.ref_name }}"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      if: ${{ inputs.ref != ''}}
      uses: actions/checkout@v2
      with:
        ref: "${{ inputs.ref }}"
        fetch-depth: 0
    # - uses: docker://ghcr.io/ropensci-review-tools/pkgcheck-action:latest
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   id: pkgcheck
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: visual-network
    #     path: "${{ steps.pkgcheck.outputs.visnet_path }}"
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: results
    #     path: "${{ steps.pkgcheck.outputs.results }}"
    # - name: Fail if pkgcheck found problems
    #   run: exit ${{ steps.pkgcheck.outputs.status }}
    #   shell: bash
    - name: Check for active issue
      id: get-id
      if: ${{ inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          const query = "repo:${{ github.repository }} is:issue is:open user:app/github-actions in:title ${{ inputs.issue-title }}"
          const issues = await github.rest.search.issuesAndPullRequests({ q: query, sort: "created" })
          let issue_nr
          if(typeof issues === 'undefined') {
            issue_nr = -1
          } else {
            const issue = issues.data.items.find(function (e) {
              e.title === '${{ inputs.issue-title }}' &&
                e.state === 'open' &&
                e.user.login === 'github-actions'
            })
            issue_nr = typeof issue === 'undefined' ? -1 : issue.number
          }
          return issue_nr
    - name: Update Issue
      if: ${{ steps.get-id.outputs.result != -1 && inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issue.update({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.repository }}'.split('/', 2),
            issue_number: ${{ steps.get-id.outputs.result }},
            body: "## Checks for [touchstone (v0.0.0.9002)](https://github.com/lorenzwalthert/touchstone)%0A%0Agit hash: [3c213df5](https://github.com/lorenzwalthert/touchstone/tree/3c213df5bb2c350603d821a934aab8716f439d87)%0A%0A- :heavy_check_mark: Package name is available%0A- :heavy_multiplication_x: does not have a 'CITATION' file.%0A- :heavy_multiplication_x: does not have a 'codemeta.json' file.%0A- :heavy_multiplication_x: does not have a 'contributing' file.%0A- :heavy_check_mark: uses 'roxygen2'.%0A- :heavy_check_mark: 'DESCRIPTION' has a URL field.%0A- :heavy_check_mark: 'DESCRIPTION' has a BugReports field.%0A- :heavy_check_mark: Package has at least one HTML vignette%0A- :heavy_multiplication_x: These functions do not have examples: [benchmark_analyze, benchmark_ls, benchmark_read, benchmark_run, benchmark_write, branch_get_or_fail, branch_install, path_pinned_asset, pr_comment, touchstone_managers, touchstone_script, use_touchstone].%0A- :heavy_multiplication_x:  Package has no continuous integration checks.%0A- :heavy_check_mark: Package coverage is 86%25.%0A- :heavy_check_mark: R CMD check found no errors.%0A- :heavy_check_mark: R CMD check found no warnings.%0A%0A**Important:** All failing checks above must be addressed prior to proceeding%0A%0APackage License: MIT + file LICENSE%0A",
          })
    - name: Create Issue
      if: ${{ steps.get-id.outputs.result == -1 && inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          const repo = '${{ github.repository }}'.split('/', 2)[1]
          github.rest.issue.create({
            owner: '${{ github.repository_owner }}',
            repo: repo,
            title: '${{ inputs.issue-title }}'
            body: "## Checks for [touchstone (v0.0.0.9002)](https://github.com/lorenzwalthert/touchstone)%0A%0Agit hash: [3c213df5](https://github.com/lorenzwalthert/touchstone/tree/3c213df5bb2c350603d821a934aab8716f439d87)%0A%0A- :heavy_check_mark: Package name is available%0A- :heavy_multiplication_x: does not have a 'CITATION' file.%0A- :heavy_multiplication_x: does not have a 'codemeta.json' file.%0A- :heavy_multiplication_x: does not have a 'contributing' file.%0A- :heavy_check_mark: uses 'roxygen2'.%0A- :heavy_check_mark: 'DESCRIPTION' has a URL field.%0A- :heavy_check_mark: 'DESCRIPTION' has a BugReports field.%0A- :heavy_check_mark: Package has at least one HTML vignette%0A- :heavy_multiplication_x: These functions do not have examples: [benchmark_analyze, benchmark_ls, benchmark_read, benchmark_run, benchmark_write, branch_get_or_fail, branch_install, path_pinned_asset, pr_comment, touchstone_managers, touchstone_script, use_touchstone].%0A- :heavy_multiplication_x:  Package has no continuous integration checks.%0A- :heavy_check_mark: Package coverage is 86%25.%0A- :heavy_check_mark: R CMD check found no errors.%0A- :heavy_check_mark: R CMD check found no warnings.%0A%0A**Important:** All failing checks above must be addressed prior to proceeding%0A%0APackage License: MIT + file LICENSE%0A",
          })
          
