name: "pkgcheck"
description: "Test your package with {pkgcheck}."
inputs:
  ref:
    description: "The ref to checkout and check. Set to empty string to skip checkout."
    default: "${{ github.ref }}"
    required: true
  post-to-issue:
    description: "Should the pkgcheck results be posted as an issue?"
    default: true
    required: true
  issue-title:
    description: "Name for the issue containing the pkgcheck results. Will be created or updated."
    default: "pkgcheck results - ${{ github.ref_name }}"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      if: ${{ inputs.ref != ''}}
      uses: actions/checkout@v2
      with:
        ref: "${{ inputs.ref }}"
        fetch-depth: 0
    - uses: docker://ghcr.io/ropensci-review-tools/pkgcheck-action:latest
      env:
        GITHUB_TOKEN: ${{ github.token }}
      id: pkgcheck
    - uses: actions/upload-artifact@v2
      with:
        name: visual-network
        path: "${{ steps.pkgcheck.outputs.visnet_path }}"
    - uses: actions/upload-artifact@v2
      with:
        name: results
        path: "${{ steps.pkgcheck.outputs.results }}"
    - name: Fail if pkgcheck found problems
      run: exit ${{ steps.pkgcheck.outputs.status }}
      shell: bash
    - name: Check for active issue
      id: get-id
      if: ${{ inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          const bot_name = 'github-actions[bot]'
          const query = "repo:${{ github.repository }} is:issue is:open user:" + bot_name + " in:title ${{ inputs.issue-title }}"
          const issues = await github.rest.search.issuesAndPullRequests({ q: query, sort: "created" })
          let issue_nr
          if(typeof issues === 'undefined') {
            issue_nr = -1
          } else {
            const issue = issues.data.items.find(e => e.title === '${{ inputs.issue-title }}' && 
                                                                   e.state === 'open' && 
                                                                   e.user.login === bot_name
            )
            issue_nr = typeof issue === 'undefined' ? -1 : issue.number
          }
          return issue_nr
    - id: get-repo
      if: ${{ inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        result-encoding: string
        script: |
          return '${{ github.repository }}'.split('/', 2)[1]
    - name: Update Issue
      if: ${{ steps.get-id.outputs.result != -1 && inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.update({
            owner: '${{ github.repository_owner }}',
            repo: '${{ steps.get-repo.outputs.result }}',
            issue_number: ${{ steps.get-id.outputs.result }},
            body: ${{ inputs.summary-only }} ? "${{ steps.pkgcheck.outputs.summary_md }}" : "${{ steps.pkgcheck.outputs.full_md }}",
            })
    - name: Create Issue
      if: ${{ steps.get-id.outputs.result == -1 && inputs.post-to-issue}}
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.create({
            owner: '${{ github.repository_owner }}',
            repo: '${{ steps.get-repo.outputs.result }}',
            title: '${{ inputs.issue-title }}',
            body: ${{ inputs.summary-only }} ? "${{ steps.pkgcheck.outputs.summary_md }}" : "${{ steps.pkgcheck.outputs.full_md }}",
            })
          
