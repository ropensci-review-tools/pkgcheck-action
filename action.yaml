name: 'pkgcheck'
description: 'Test your package with {pkgcheck}.'
inputs:
  ref:
    description: 'The ref to checkout and check. Set to empty string to skip checkout.'
    default: '${{ github.ref }}'
    required: true
  post-to-issue:
    description: 'Should the pkgcheck results be posted as an issue?'
    default: true
    required: true
  issue-title:
    description: 'Name for the issue containing the pkgcheck results. Will be created or updated.'
    default: 'pkgcheck results - ${{ github.ref_name }}'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      if: ${{ inputs.ref != ''}} 
      uses: actions/checkout@v2
      with:
        ref: '${{ inputs.ref }}'
        fetch-depth: 0
    # - uses: docker://ghcr.io/ropensci-review-tools/pkgcheck-action:latest
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   id: pkgcheck
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: visual-network
    #     path: "${{ steps.pkgcheck.outputs.visnet_path }}"
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: results
    #     path: "${{ steps.pkgcheck.outputs.results }}"
    # - name: Fail if pkgcheck found problems
    #   run: exit ${{ steps.pkgcheck.outputs.status }}
    #   shell: bash
    - name: Check for active issue
      id: get-id
      if: $${{ inputs.post-to-issue}} 
      uses: actions/github-script@v5
      with:
        script: |
          const query = "repo:${{ github.repository }} is:issue is:open user:app/github-actions in:title ${{ inputs.issue-title }}"
          console.log(query)
          const issues = await github.rest.search.issuesAndPullRequests({ q: query, sort: "created" })
          let issue_id
          if(typeof issues === 'undefined') {
            issue_id = -1
          } else {
             const issue = issues.data.items.find(e => e.title === '${{ inputs.issue-title }}' && e.state === 'open')
             issue_id = typeof issue === 'undefined' ? -1 : issue.id
          }
          return issue_id
    - name: Log issue id
      if: $${{ inputs.post-to-issue}} 
      run: echo ${{ steps.get-id.outputs.result }}
      shell: bash
          
